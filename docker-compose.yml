services:
  # PostgreSQL database for User Service
  user-db:
    image: postgres:15
    environment:
      POSTGRES_DB: chatapp_users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatapp_users"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database for Chat Service
  chat-db:
    image: postgres:15
    environment:
      POSTGRES_DB: chatapp_chats
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - chat_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatapp_chats"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for pub/sub and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service Instance 1
  user-service-1:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=4001
      - DB_HOST=user-db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=chatapp_users
    ports:
      - "4001:4001"
    depends_on:
      user-db:
        condition: service_healthy
    restart: unless-stopped

  # User Service Instance 2
  user-service-2:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=4003
      - DB_HOST=user-db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=chatapp_users
    ports:
      - "4003:4003"
    depends_on:
      user-db:
        condition: service_healthy
    restart: unless-stopped

  # Chat Service Instance 1
  chat-service-1:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=4002
      - DB_HOST=chat-db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=chatapp_chats
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service-1:4001/graphql
    ports:
      - "4002:4002"
    depends_on:
      chat-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service-1:
        condition: service_started
    restart: unless-stopped

  # Chat Service Instance 2
  chat-service-2:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=4004
      - DB_HOST=chat-db
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=chatapp_chats
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service-2:4003/graphql
    ports:
      - "4004:4004"
    depends_on:
      chat-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service-2:
        condition: service_started
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - user-service-1
      - user-service-2
      - chat-service-1
      - chat-service-2
    restart: unless-stopped

volumes:
  user_db_data:
  chat_db_data:
  redis_data: